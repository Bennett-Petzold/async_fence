searchState.loadedDescShard("async_fence", 0, "<code>async_fence</code> provies <code>no_std</code> async fences and OnceLock.\nAsynchronous fence.\nReleases the <code>Fence</code> on <code>Drop</code>.\nWaits for a <code>Fence</code> to release via <code>FenceHolder</code>.\n<code>FenceWaiter</code> that extends the underlying collection.\nA <code>Fence</code> based on a static array.\nReturns the underlying capacity.\nExecutes <code>WakerArrExtending::fill</code> on the waker array.\nReturns if the fence has been released.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProduces a handle to release the fence on drop.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new fence on the empty queue.\nExecutes <code>WakerArrExtending::reserve</code> on the waker array.\nReturns the claimed capacity.\nProduces a handle to wait for the fence to drop.\nProduces a handle to wait for the fence to drop.\nArray wrapper that may extend (e.g. <code>Vec</code>).\nSame as <code>alloc::vec::Vec::drain</code>.\nCreates <code>additional</code> uninitialized entries.\nSame as <code>alloc::vec::Vec::push</code>.\nSame as <code>alloc::vec::Vec::reserve</code>.")