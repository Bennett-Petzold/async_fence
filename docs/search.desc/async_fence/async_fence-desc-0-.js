searchState.loadedDescShard("async_fence", 0, "<code>async_fence</code> provies <code>no_std</code> async fences and OnceLock.\nDefines the core async wait for a waker.\nAsynchronous fence.\nWaits for a <code>Fence</code> to release.\n<code>FenceWaiter</code> that extends the underlying collection.\nA <code>Fence</code> based on a static array.\nA <code>Fence</code> based on a <code>Vec</code>.\nReturns the underlying capacity.\nExecutes <code>WakerArrExtending::fill</code> on the waker array.\nReturns if the fence has been released.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new fence on the empty queue.\nReleases the <code>Fence</code>.\nExecutes <code>WakerArrExtending::reserve</code> on the waker array.\nReturns the claimed capacity.\nProduces a handle to wait for the fence to drop.\nProduces a handle to wait for the fence to drop.\nArray wrapper that may extend (e.g. <code>Vec</code>).\nSame as <code>alloc::vec::Vec::drain</code>.\nCreates <code>additional</code> uninitialized entries.\nSame as <code>alloc::vec::Vec::push</code>.\nSame as <code>alloc::vec::Vec::reserve</code>.\nAsync equivalent of <code>std::sync::LazyLock</code>.\nReturns the argument unchanged.\nResolves the lock into the evaluated value.\nCalls <code>U::from(self)</code>.\nCreates a new lazy value with the given initializing …\nAsync equivalent of <code>std::sync::OnceLock</code>.\nEither initializes the <code>OnceLock</code> or waits for another …\nInitializes <code>OnceLock</code> with the given future, returning the …\nFinishes with <code>Some(T)</code> on <code>OnceLock</code> initialization.\nA <code>OnceLock</code> backed by a static array.\nA <code>OnceLock</code> backed by a <code>Vec</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the underlying value if initialized.\nReturns a mutable reference to the underlying value if …\nReturns a future for the inner value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the underlying value if initialized.\nCreates a new <code>Self</code> backed by the empty queue.\nImmediately sets the internal value if uninitialized.\nReturns the underlying value if initialized, resetting to …\nReturns the underlying value if initialized, resetting to …\nReturns the underlying value if initialized, resetting to …\nTries to immediately set and return the internal value if …\nWaits for initialization and returns that value.")