(function() {
    var type_impls = Object.fromEntries([["async_fence",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Fence%3CArr%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#80\">Source</a><a href=\"#impl-Debug-for-Fence%3CArr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Arr: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[<a class=\"type\" href=\"async_fence/type.FenceWaker.html\" title=\"type async_fence::FenceWaker\">FenceWaker</a>]&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"async_fence/struct.Fence.html\" title=\"struct async_fence::Fence\">Fence</a>&lt;Arr&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#80\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","async_fence::async_fence::StaticFence"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-Fence%3CArr%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#141-151\">Source</a><a href=\"#impl-Default-for-Fence%3CArr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Arr&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"async_fence/struct.Fence.html\" title=\"struct async_fence::Fence\">Fence</a>&lt;Arr&gt;<div class=\"where\">where\n    Arr: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[<a class=\"type\" href=\"async_fence/type.FenceWaker.html\" title=\"type async_fence::FenceWaker\">FenceWaker</a>]&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#145-150\">Source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","async_fence::async_fence::StaticFence"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Fence%3CArr%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#120-139\">Source</a><a href=\"#impl-Drop-for-Fence%3CArr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Arr&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for <a class=\"struct\" href=\"async_fence/struct.Fence.html\" title=\"struct async_fence::Fence\">Fence</a>&lt;Arr&gt;<div class=\"where\">where\n    Arr: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[<a class=\"type\" href=\"async_fence/type.FenceWaker.html\" title=\"type async_fence::FenceWaker\">FenceWaker</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#124-138\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/nightly/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","async_fence::async_fence::StaticFence"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Fence%3CArr%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#181-192\">Source</a><a href=\"#impl-Fence%3CArr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Arr&gt; <a class=\"struct\" href=\"async_fence/struct.Fence.html\" title=\"struct async_fence::Fence\">Fence</a>&lt;Arr&gt;<div class=\"where\">where\n    Arr: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[<a class=\"type\" href=\"async_fence/type.FenceWaker.html\" title=\"type async_fence::FenceWaker\">FenceWaker</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hold\" class=\"method\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#186-191\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_fence/struct.Fence.html#tymethod.hold\" class=\"fn\">hold</a>&lt;'a&gt;(&amp;'a self) -&gt; <a class=\"struct\" href=\"async_fence/struct.FenceHolder.html\" title=\"struct async_fence::FenceHolder\">FenceHolder</a>&lt;'a, Arr&gt;<div class=\"where\">where\n    Arr: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Produces a handle to release the fence on drop.</p>\n</div></details></div></details>",0,"async_fence::async_fence::StaticFence"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Fence%3CArr%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#353-367\">Source</a><a href=\"#impl-Fence%3CArr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Arr&gt; <a class=\"struct\" href=\"async_fence/struct.Fence.html\" title=\"struct async_fence::Fence\">Fence</a>&lt;Arr&gt;<div class=\"where\">where\n    Arr: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[<a class=\"type\" href=\"async_fence/type.FenceWaker.html\" title=\"type async_fence::FenceWaker\">FenceWaker</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.wait\" class=\"method\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#358-366\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_fence/struct.Fence.html#tymethod.wait\" class=\"fn\">wait</a>&lt;'a&gt;(&amp;'a self) -&gt; <a class=\"struct\" href=\"async_fence/struct.FenceWaiter.html\" title=\"struct async_fence::FenceWaiter\">FenceWaiter</a>&lt;'a, Arr&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FenceWaiter&lt;&#39;a, Arr&gt;\">ⓘ</a><div class=\"where\">where\n    Arr: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Produces a handle to wait for the fence to drop.</p>\n</div></details></div></details>",0,"async_fence::async_fence::StaticFence"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Fence%3CArr%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#496-581\">Source</a><a href=\"#impl-Fence%3CArr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Arr&gt; <a class=\"struct\" href=\"async_fence/struct.Fence.html\" title=\"struct async_fence::Fence\">Fence</a>&lt;Arr&gt;<div class=\"where\">where\n    Arr: <a class=\"trait\" href=\"async_fence/extending_arr/trait.WakerArrExtending.html\" title=\"trait async_fence::extending_arr::WakerArrExtending\">WakerArrExtending</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.reserve_storage\" class=\"method\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#501-503\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_fence/struct.Fence.html#tymethod.reserve_storage\" class=\"fn\">reserve_storage</a>(&amp;self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Executes <a href=\"async_fence/extending_arr/trait.WakerArrExtending.html#tymethod.reserve\" title=\"method async_fence::extending_arr::WakerArrExtending::reserve\"><code>WakerArrExtending::reserve</code></a> on the waker array.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fill_storage\" class=\"method\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#539-541\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_fence/struct.Fence.html#tymethod.fill_storage\" class=\"fn\">fill_storage</a>(&amp;self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Executes <a href=\"async_fence/extending_arr/trait.WakerArrExtending.html#method.fill\" title=\"method async_fence::extending_arr::WakerArrExtending::fill\"><code>WakerArrExtending::fill</code></a> on the waker array.</p>\n<p>Can be used to ensure space before converting <a href=\"async_fence/struct.FenceWaiterExtending.html\" title=\"struct async_fence::FenceWaiterExtending\"><code>FenceWaiterExtending</code></a>\nto <a href=\"async_fence/struct.FenceWaiter.html\" title=\"struct async_fence::FenceWaiter\"><code>FenceWaiter</code></a>. Both static and dynamically created waiters can\nthen be treated as a single type.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_fence::{Fence, FenceWaker};\n\n<span class=\"kw\">use </span>std::{sync::LazyLock, vec::Vec};\n\n<span class=\"comment\">// This fence has dynamic storage and will live for the entire program.\n</span><span class=\"kw\">static </span>FENCE: LazyLock&lt;Fence&lt;Vec&lt;FenceWaker&gt;&gt;&gt; = LazyLock::new(Fence::default);\n\n<span class=\"kw\">let </span>holder = FENCE.hold();\n\n<span class=\"comment\">// This preallocates for 3 non-dynamic wait entries.\n</span>FENCE.fill_storage(<span class=\"number\">3</span>);\n\n<span class=\"kw\">let </span>rt = tokio::runtime::Builder::new_current_thread().build().unwrap();\nrt.block_on(<span class=\"kw\">async </span>{\n\n    <span class=\"comment\">// The fence storage will not extend further, as this is a regular\n    // wait handle.\n    </span><span class=\"kw\">let </span>handles: [<span class=\"kw\">_</span>; <span class=\"number\">3</span>] = core::array::from_fn(|<span class=\"kw\">_</span>| tokio::spawn(FENCE.wait()));\n\n    <span class=\"comment\">// After the holder is dropped, all the waiters finish.\n    </span>drop(holder);\n    <span class=\"kw\">for </span>handle <span class=\"kw\">in </span>handles {\n        handle.<span class=\"kw\">await</span>;\n    }\n});</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wait_extending\" class=\"method\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#575-580\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_fence/struct.Fence.html#tymethod.wait_extending\" class=\"fn\">wait_extending</a>&lt;'a&gt;(&amp;'a self) -&gt; <a class=\"struct\" href=\"async_fence/struct.FenceWaiterExtending.html\" title=\"struct async_fence::FenceWaiterExtending\">FenceWaiterExtending</a>&lt;'a, Arr&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"FenceWaiterExtending&lt;&#39;a, Arr&gt;\">ⓘ</a><div class=\"where\">where\n    Arr: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Produces a handle to wait for the fence to drop.</p>\n<p>Extends the underlying storage when out of space for wakers.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>async_fence::{Fence, FenceWaker};\n\n<span class=\"kw\">use </span>std::{sync::LazyLock, vec::Vec};\n\n<span class=\"comment\">// This fence has dynamic storage and will live for the entire program.\n</span><span class=\"kw\">static </span>FENCE: LazyLock&lt;Fence&lt;Vec&lt;FenceWaker&gt;&gt;&gt; = LazyLock::new(Fence::default);\n\n<span class=\"comment\">// This is an alternative that executes const, and plays by the unsafe\n// rules. Const function cannot currently be set for a trait, so this\n// has to be done manually.\n</span><span class=\"kw\">static </span>UNSAFE_FENCE: Fence&lt;Vec&lt;FenceWaker&gt;&gt; = <span class=\"kw\">unsafe </span>{ Fence::new(Vec::new()) };\n\n<span class=\"kw\">let </span>holder = FENCE.hold();\n\n<span class=\"kw\">let </span>rt = tokio::runtime::Builder::new_current_thread().build().unwrap();\nrt.block_on(<span class=\"kw\">async </span>{\n    <span class=\"comment\">// The fence storage will extend to fit all the handles.\n    </span><span class=\"kw\">let </span>handles: [<span class=\"kw\">_</span>; <span class=\"number\">3</span>] = core::array::from_fn(|<span class=\"kw\">_</span>| tokio::spawn(FENCE.wait_extending()));\n\n    <span class=\"comment\">// After the holder is dropped, all the waiters finish.\n    </span>drop(holder);\n    <span class=\"kw\">for </span>handle <span class=\"kw\">in </span>handles {\n        handle.<span class=\"kw\">await</span>;\n    }\n});</code></pre></div>\n</div></details></div></details>",0,"async_fence::async_fence::StaticFence"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Fence%3CArr%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#86-118\">Source</a><a href=\"#impl-Fence%3CArr%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Arr&gt; <a class=\"struct\" href=\"async_fence/struct.Fence.html\" title=\"struct async_fence::Fence\">Fence</a>&lt;Arr&gt;<div class=\"where\">where\n    Arr: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[<a class=\"type\" href=\"async_fence/type.FenceWaker.html\" title=\"type async_fence::FenceWaker\">FenceWaker</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#94-99\">Source</a><h4 class=\"code-header\">pub const unsafe fn <a href=\"async_fence/struct.Fence.html#tymethod.new\" class=\"fn\">new</a>(queue: Arr) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Creates a new fence on the empty queue.</p>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>The queue <em>must</em> be entirely filled as <a href=\"https://doc.rust-lang.org/nightly/core/mem/maybe_uninit/union.MaybeUninit.html#method.uninit\" title=\"associated function core::mem::maybe_uninit::MaybeUninit::uninit\"><code>MaybeUninit::uninit</code></a>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.finished\" class=\"method\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#102-104\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_fence/struct.Fence.html#tymethod.finished\" class=\"fn\">finished</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns if the fence has been released.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#107-109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_fence/struct.Fence.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the underlying capacity.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.usage\" class=\"method\"><a class=\"src rightside\" href=\"src/async_fence/async_fence.rs.html#115-117\">Source</a><h4 class=\"code-header\">pub fn <a href=\"async_fence/struct.Fence.html#tymethod.usage\" class=\"fn\">usage</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/core/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the claimed capacity.</p>\n<p>The number of waiters may exceed this if they haven’t all claimed an\nentry yet.</p>\n</div></details></div></details>",0,"async_fence::async_fence::StaticFence"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[18341]}